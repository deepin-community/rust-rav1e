From: Sebastian Ramacher <sramacher@debian.org>
Date: Thu, 29 Dec 2022 11:36:12 +0100
Subject: Bump av-metrics

---
 Cargo.toml       |  2 +-
 src/bin/stats.rs | 25 +++++++------------------
 2 files changed, 8 insertions(+), 19 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 883cd38..abbcb39 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -61,7 +61,7 @@ version = "0.3"
 version = "0.7"
 
 [dependencies.av-metrics]
-version = "0.7.1"
+version = "0.8.1"
 optional = true
 default-features = false
 
diff --git a/src/bin/stats.rs b/src/bin/stats.rs
index 09e3b77..d36c2cd 100644
--- a/src/bin/stats.rs
+++ b/src/bin/stats.rs
@@ -744,42 +744,31 @@ pub fn calculate_frame_metrics<T: Pixel>(
   frame1: &Frame<T>, frame2: &Frame<T>, bit_depth: usize, cs: ChromaSampling,
   metrics: MetricsEnabled,
 ) -> QualityMetrics {
-  let frame1_info = FrameInfo {
-    planes: frame1.planes.clone(),
-    bit_depth,
-    chroma_sampling: cs,
-  };
-
-  let frame2_info = FrameInfo {
-    planes: frame2.planes.clone(),
-    bit_depth,
-    chroma_sampling: cs,
-  };
-
   match metrics {
     MetricsEnabled::None => QualityMetrics::default(),
     MetricsEnabled::Psnr => QualityMetrics {
       psnr: Some(
-        psnr::calculate_frame_psnr(&frame1_info, &frame2_info).unwrap(),
+        psnr::calculate_frame_psnr(frame1, frame2, bit_depth, cs).unwrap(),
       ),
       ..Default::default()
     },
     MetricsEnabled::All => {
       let mut metrics = QualityMetrics {
         psnr: Some(
-          psnr::calculate_frame_psnr(&frame1_info, &frame2_info).unwrap(),
+          psnr::calculate_frame_psnr(frame1, frame2, bit_depth, cs).unwrap(),
         ),
         psnr_hvs: Some(
-          psnr_hvs::calculate_frame_psnr_hvs(&frame1_info, &frame2_info)
+          psnr_hvs::calculate_frame_psnr_hvs(frame1, frame2, bit_depth, cs)
             .unwrap(),
         ),
         ..Default::default()
       };
-      let ssim = ssim::calculate_frame_ssim(&frame1_info, &frame2_info);
+      let ssim = ssim::calculate_frame_ssim(frame1, frame2, bit_depth, cs);
       metrics.ssim = Some(ssim.unwrap());
-      let ms_ssim = ssim::calculate_frame_msssim(&frame1_info, &frame2_info);
+      let ms_ssim =
+        ssim::calculate_frame_msssim(frame1, frame2, bit_depth, cs);
       metrics.ms_ssim = Some(ms_ssim.unwrap());
-      let ciede = ciede::calculate_frame_ciede(&frame1_info, &frame2_info);
+      let ciede = ciede::calculate_frame_ciede(frame1, frame2, bit_depth, cs);
       metrics.ciede = Some(ciede.unwrap());
       // TODO APSNR
       // TODO VMAF
